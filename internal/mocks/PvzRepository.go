// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	models "pvz/internal/models"

	mock "github.com/stretchr/testify/mock"

	pvz "pvz/internal/models/pvz"

	repositories "pvz/internal/repositories"
)

// PvzRepository is an autogenerated mock type for the PvzRepository type
type PvzRepository struct {
	mock.Mock
}

type PvzRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *PvzRepository) EXPECT() *PvzRepository_Expecter {
	return &PvzRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: q, reqPvz
func (_m *PvzRepository) Create(q repositories.Querier, reqPvz pvz.CreateRequest) (*models.Pvz, error) {
	ret := _m.Called(q, reqPvz)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.Pvz
	var r1 error
	if rf, ok := ret.Get(0).(func(repositories.Querier, pvz.CreateRequest) (*models.Pvz, error)); ok {
		return rf(q, reqPvz)
	}
	if rf, ok := ret.Get(0).(func(repositories.Querier, pvz.CreateRequest) *models.Pvz); ok {
		r0 = rf(q, reqPvz)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Pvz)
		}
	}

	if rf, ok := ret.Get(1).(func(repositories.Querier, pvz.CreateRequest) error); ok {
		r1 = rf(q, reqPvz)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PvzRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type PvzRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - q repositories.Querier
//   - reqPvz pvz.CreateRequest
func (_e *PvzRepository_Expecter) Create(q interface{}, reqPvz interface{}) *PvzRepository_Create_Call {
	return &PvzRepository_Create_Call{Call: _e.mock.On("Create", q, reqPvz)}
}

func (_c *PvzRepository_Create_Call) Run(run func(q repositories.Querier, reqPvz pvz.CreateRequest)) *PvzRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(repositories.Querier), args[1].(pvz.CreateRequest))
	})
	return _c
}

func (_c *PvzRepository_Create_Call) Return(_a0 *models.Pvz, _a1 error) *PvzRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PvzRepository_Create_Call) RunAndReturn(run func(repositories.Querier, pvz.CreateRequest) (*models.Pvz, error)) *PvzRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: q, id
func (_m *PvzRepository) GetById(q repositories.Querier, id string) (*models.Pvz, error) {
	ret := _m.Called(q, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *models.Pvz
	var r1 error
	if rf, ok := ret.Get(0).(func(repositories.Querier, string) (*models.Pvz, error)); ok {
		return rf(q, id)
	}
	if rf, ok := ret.Get(0).(func(repositories.Querier, string) *models.Pvz); ok {
		r0 = rf(q, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Pvz)
		}
	}

	if rf, ok := ret.Get(1).(func(repositories.Querier, string) error); ok {
		r1 = rf(q, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PvzRepository_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type PvzRepository_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - q repositories.Querier
//   - id string
func (_e *PvzRepository_Expecter) GetById(q interface{}, id interface{}) *PvzRepository_GetById_Call {
	return &PvzRepository_GetById_Call{Call: _e.mock.On("GetById", q, id)}
}

func (_c *PvzRepository_GetById_Call) Run(run func(q repositories.Querier, id string)) *PvzRepository_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(repositories.Querier), args[1].(string))
	})
	return _c
}

func (_c *PvzRepository_GetById_Call) Return(_a0 *models.Pvz, _a1 error) *PvzRepository_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PvzRepository_GetById_Call) RunAndReturn(run func(repositories.Querier, string) (*models.Pvz, error)) *PvzRepository_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// ListWithFilterDate provides a mock function with given fields: q, reqPvz, offset
func (_m *PvzRepository) ListWithFilterDate(q repositories.Querier, reqPvz pvz.ListRequest, offset int) ([]pvz.RawList, error) {
	ret := _m.Called(q, reqPvz, offset)

	if len(ret) == 0 {
		panic("no return value specified for ListWithFilterDate")
	}

	var r0 []pvz.RawList
	var r1 error
	if rf, ok := ret.Get(0).(func(repositories.Querier, pvz.ListRequest, int) ([]pvz.RawList, error)); ok {
		return rf(q, reqPvz, offset)
	}
	if rf, ok := ret.Get(0).(func(repositories.Querier, pvz.ListRequest, int) []pvz.RawList); ok {
		r0 = rf(q, reqPvz, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pvz.RawList)
		}
	}

	if rf, ok := ret.Get(1).(func(repositories.Querier, pvz.ListRequest, int) error); ok {
		r1 = rf(q, reqPvz, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PvzRepository_ListWithFilterDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWithFilterDate'
type PvzRepository_ListWithFilterDate_Call struct {
	*mock.Call
}

// ListWithFilterDate is a helper method to define mock.On call
//   - q repositories.Querier
//   - reqPvz pvz.ListRequest
//   - offset int
func (_e *PvzRepository_Expecter) ListWithFilterDate(q interface{}, reqPvz interface{}, offset interface{}) *PvzRepository_ListWithFilterDate_Call {
	return &PvzRepository_ListWithFilterDate_Call{Call: _e.mock.On("ListWithFilterDate", q, reqPvz, offset)}
}

func (_c *PvzRepository_ListWithFilterDate_Call) Run(run func(q repositories.Querier, reqPvz pvz.ListRequest, offset int)) *PvzRepository_ListWithFilterDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(repositories.Querier), args[1].(pvz.ListRequest), args[2].(int))
	})
	return _c
}

func (_c *PvzRepository_ListWithFilterDate_Call) Return(_a0 []pvz.RawList, _a1 error) *PvzRepository_ListWithFilterDate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PvzRepository_ListWithFilterDate_Call) RunAndReturn(run func(repositories.Querier, pvz.ListRequest, int) ([]pvz.RawList, error)) *PvzRepository_ListWithFilterDate_Call {
	_c.Call.Return(run)
	return _c
}

// NewPvzRepository creates a new instance of PvzRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPvzRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PvzRepository {
	mock := &PvzRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
