// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	product "pvz/internal/models/product"

	mock "github.com/stretchr/testify/mock"
)

// ProductService is an autogenerated mock type for the ProductService type
type ProductService struct {
	mock.Mock
}

type ProductService_Expecter struct {
	mock *mock.Mock
}

func (_m *ProductService) EXPECT() *ProductService_Expecter {
	return &ProductService_Expecter{mock: &_m.Mock}
}

// AddInReception provides a mock function with given fields: req
func (_m *ProductService) AddInReception(req product.AddInReceptionRequest) (product.AddInReceptionResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for AddInReception")
	}

	var r0 product.AddInReceptionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(product.AddInReceptionRequest) (product.AddInReceptionResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(product.AddInReceptionRequest) product.AddInReceptionResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(product.AddInReceptionResponse)
	}

	if rf, ok := ret.Get(1).(func(product.AddInReceptionRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductService_AddInReception_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddInReception'
type ProductService_AddInReception_Call struct {
	*mock.Call
}

// AddInReception is a helper method to define mock.On call
//   - req product.AddInReceptionRequest
func (_e *ProductService_Expecter) AddInReception(req interface{}) *ProductService_AddInReception_Call {
	return &ProductService_AddInReception_Call{Call: _e.mock.On("AddInReception", req)}
}

func (_c *ProductService_AddInReception_Call) Run(run func(req product.AddInReceptionRequest)) *ProductService_AddInReception_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(product.AddInReceptionRequest))
	})
	return _c
}

func (_c *ProductService_AddInReception_Call) Return(_a0 product.AddInReceptionResponse, _a1 error) *ProductService_AddInReception_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductService_AddInReception_Call) RunAndReturn(run func(product.AddInReceptionRequest) (product.AddInReceptionResponse, error)) *ProductService_AddInReception_Call {
	_c.Call.Return(run)
	return _c
}

// NewProductService creates a new instance of ProductService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductService {
	mock := &ProductService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
