// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	reception "pvz/internal/models/reception"

	mock "github.com/stretchr/testify/mock"
)

// ReceptionService is an autogenerated mock type for the ReceptionService type
type ReceptionService struct {
	mock.Mock
}

type ReceptionService_Expecter struct {
	mock *mock.Mock
}

func (_m *ReceptionService) EXPECT() *ReceptionService_Expecter {
	return &ReceptionService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: req
func (_m *ReceptionService) Create(req reception.CreateRequest) (reception.CreateResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 reception.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(reception.CreateRequest) (reception.CreateResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(reception.CreateRequest) reception.CreateResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(reception.CreateResponse)
	}

	if rf, ok := ret.Get(1).(func(reception.CreateRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReceptionService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ReceptionService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - req reception.CreateRequest
func (_e *ReceptionService_Expecter) Create(req interface{}) *ReceptionService_Create_Call {
	return &ReceptionService_Create_Call{Call: _e.mock.On("Create", req)}
}

func (_c *ReceptionService_Create_Call) Run(run func(req reception.CreateRequest)) *ReceptionService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(reception.CreateRequest))
	})
	return _c
}

func (_c *ReceptionService_Create_Call) Return(_a0 reception.CreateResponse, _a1 error) *ReceptionService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReceptionService_Create_Call) RunAndReturn(run func(reception.CreateRequest) (reception.CreateResponse, error)) *ReceptionService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewReceptionService creates a new instance of ReceptionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReceptionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReceptionService {
	mock := &ReceptionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
