// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	models "pvz/internal/models"

	mock "github.com/stretchr/testify/mock"

	repositories "pvz/internal/repositories"
)

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

type ProductRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ProductRepository) EXPECT() *ProductRepository_Expecter {
	return &ProductRepository_Expecter{mock: &_m.Mock}
}

// AddInReception provides a mock function with given fields: q, reqProduct
func (_m *ProductRepository) AddInReception(q repositories.Querier, reqProduct models.Product) (*models.Product, error) {
	ret := _m.Called(q, reqProduct)

	if len(ret) == 0 {
		panic("no return value specified for AddInReception")
	}

	var r0 *models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(repositories.Querier, models.Product) (*models.Product, error)); ok {
		return rf(q, reqProduct)
	}
	if rf, ok := ret.Get(0).(func(repositories.Querier, models.Product) *models.Product); ok {
		r0 = rf(q, reqProduct)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(repositories.Querier, models.Product) error); ok {
		r1 = rf(q, reqProduct)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductRepository_AddInReception_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddInReception'
type ProductRepository_AddInReception_Call struct {
	*mock.Call
}

// AddInReception is a helper method to define mock.On call
//   - q repositories.Querier
//   - reqProduct models.Product
func (_e *ProductRepository_Expecter) AddInReception(q interface{}, reqProduct interface{}) *ProductRepository_AddInReception_Call {
	return &ProductRepository_AddInReception_Call{Call: _e.mock.On("AddInReception", q, reqProduct)}
}

func (_c *ProductRepository_AddInReception_Call) Run(run func(q repositories.Querier, reqProduct models.Product)) *ProductRepository_AddInReception_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(repositories.Querier), args[1].(models.Product))
	})
	return _c
}

func (_c *ProductRepository_AddInReception_Call) Return(_a0 *models.Product, _a1 error) *ProductRepository_AddInReception_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductRepository_AddInReception_Call) RunAndReturn(run func(repositories.Querier, models.Product) (*models.Product, error)) *ProductRepository_AddInReception_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLast provides a mock function with given fields: q, recId
func (_m *ProductRepository) DeleteLast(q repositories.Querier, recId string) (*models.Product, error) {
	ret := _m.Called(q, recId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLast")
	}

	var r0 *models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(repositories.Querier, string) (*models.Product, error)); ok {
		return rf(q, recId)
	}
	if rf, ok := ret.Get(0).(func(repositories.Querier, string) *models.Product); ok {
		r0 = rf(q, recId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(repositories.Querier, string) error); ok {
		r1 = rf(q, recId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductRepository_DeleteLast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLast'
type ProductRepository_DeleteLast_Call struct {
	*mock.Call
}

// DeleteLast is a helper method to define mock.On call
//   - q repositories.Querier
//   - recId string
func (_e *ProductRepository_Expecter) DeleteLast(q interface{}, recId interface{}) *ProductRepository_DeleteLast_Call {
	return &ProductRepository_DeleteLast_Call{Call: _e.mock.On("DeleteLast", q, recId)}
}

func (_c *ProductRepository_DeleteLast_Call) Run(run func(q repositories.Querier, recId string)) *ProductRepository_DeleteLast_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(repositories.Querier), args[1].(string))
	})
	return _c
}

func (_c *ProductRepository_DeleteLast_Call) Return(_a0 *models.Product, _a1 error) *ProductRepository_DeleteLast_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductRepository_DeleteLast_Call) RunAndReturn(run func(repositories.Querier, string) (*models.Product, error)) *ProductRepository_DeleteLast_Call {
	_c.Call.Return(run)
	return _c
}

// NewProductRepository creates a new instance of ProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductRepository {
	mock := &ProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
