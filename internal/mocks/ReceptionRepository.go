// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	models "pvz/internal/models"

	mock "github.com/stretchr/testify/mock"

	repositories "pvz/internal/repositories"
)

// ReceptionRepository is an autogenerated mock type for the ReceptionRepository type
type ReceptionRepository struct {
	mock.Mock
}

type ReceptionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ReceptionRepository) EXPECT() *ReceptionRepository_Expecter {
	return &ReceptionRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: q, req
func (_m *ReceptionRepository) Create(q repositories.Querier, req models.Reception) (*models.Reception, error) {
	ret := _m.Called(q, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.Reception
	var r1 error
	if rf, ok := ret.Get(0).(func(repositories.Querier, models.Reception) (*models.Reception, error)); ok {
		return rf(q, req)
	}
	if rf, ok := ret.Get(0).(func(repositories.Querier, models.Reception) *models.Reception); ok {
		r0 = rf(q, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Reception)
		}
	}

	if rf, ok := ret.Get(1).(func(repositories.Querier, models.Reception) error); ok {
		r1 = rf(q, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReceptionRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ReceptionRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - q repositories.Querier
//   - req models.Reception
func (_e *ReceptionRepository_Expecter) Create(q interface{}, req interface{}) *ReceptionRepository_Create_Call {
	return &ReceptionRepository_Create_Call{Call: _e.mock.On("Create", q, req)}
}

func (_c *ReceptionRepository_Create_Call) Run(run func(q repositories.Querier, req models.Reception)) *ReceptionRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(repositories.Querier), args[1].(models.Reception))
	})
	return _c
}

func (_c *ReceptionRepository_Create_Call) Return(_a0 *models.Reception, _a1 error) *ReceptionRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReceptionRepository_Create_Call) RunAndReturn(run func(repositories.Querier, models.Reception) (*models.Reception, error)) *ReceptionRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByPvzId provides a mock function with given fields: q, pvzId
func (_m *ReceptionRepository) GetByPvzId(q repositories.Querier, pvzId string) (*models.Reception, error) {
	ret := _m.Called(q, pvzId)

	if len(ret) == 0 {
		panic("no return value specified for GetByPvzId")
	}

	var r0 *models.Reception
	var r1 error
	if rf, ok := ret.Get(0).(func(repositories.Querier, string) (*models.Reception, error)); ok {
		return rf(q, pvzId)
	}
	if rf, ok := ret.Get(0).(func(repositories.Querier, string) *models.Reception); ok {
		r0 = rf(q, pvzId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Reception)
		}
	}

	if rf, ok := ret.Get(1).(func(repositories.Querier, string) error); ok {
		r1 = rf(q, pvzId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReceptionRepository_GetByPvzId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByPvzId'
type ReceptionRepository_GetByPvzId_Call struct {
	*mock.Call
}

// GetByPvzId is a helper method to define mock.On call
//   - q repositories.Querier
//   - pvzId string
func (_e *ReceptionRepository_Expecter) GetByPvzId(q interface{}, pvzId interface{}) *ReceptionRepository_GetByPvzId_Call {
	return &ReceptionRepository_GetByPvzId_Call{Call: _e.mock.On("GetByPvzId", q, pvzId)}
}

func (_c *ReceptionRepository_GetByPvzId_Call) Run(run func(q repositories.Querier, pvzId string)) *ReceptionRepository_GetByPvzId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(repositories.Querier), args[1].(string))
	})
	return _c
}

func (_c *ReceptionRepository_GetByPvzId_Call) Return(_a0 *models.Reception, _a1 error) *ReceptionRepository_GetByPvzId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReceptionRepository_GetByPvzId_Call) RunAndReturn(run func(repositories.Querier, string) (*models.Reception, error)) *ReceptionRepository_GetByPvzId_Call {
	_c.Call.Return(run)
	return _c
}

// SetStatus provides a mock function with given fields: q, status, pvzId
func (_m *ReceptionRepository) SetStatus(q repositories.Querier, status string, pvzId string) (*models.Reception, error) {
	ret := _m.Called(q, status, pvzId)

	if len(ret) == 0 {
		panic("no return value specified for SetStatus")
	}

	var r0 *models.Reception
	var r1 error
	if rf, ok := ret.Get(0).(func(repositories.Querier, string, string) (*models.Reception, error)); ok {
		return rf(q, status, pvzId)
	}
	if rf, ok := ret.Get(0).(func(repositories.Querier, string, string) *models.Reception); ok {
		r0 = rf(q, status, pvzId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Reception)
		}
	}

	if rf, ok := ret.Get(1).(func(repositories.Querier, string, string) error); ok {
		r1 = rf(q, status, pvzId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReceptionRepository_SetStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStatus'
type ReceptionRepository_SetStatus_Call struct {
	*mock.Call
}

// SetStatus is a helper method to define mock.On call
//   - q repositories.Querier
//   - status string
//   - pvzId string
func (_e *ReceptionRepository_Expecter) SetStatus(q interface{}, status interface{}, pvzId interface{}) *ReceptionRepository_SetStatus_Call {
	return &ReceptionRepository_SetStatus_Call{Call: _e.mock.On("SetStatus", q, status, pvzId)}
}

func (_c *ReceptionRepository_SetStatus_Call) Run(run func(q repositories.Querier, status string, pvzId string)) *ReceptionRepository_SetStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(repositories.Querier), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ReceptionRepository_SetStatus_Call) Return(_a0 *models.Reception, _a1 error) *ReceptionRepository_SetStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReceptionRepository_SetStatus_Call) RunAndReturn(run func(repositories.Querier, string, string) (*models.Reception, error)) *ReceptionRepository_SetStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewReceptionRepository creates a new instance of ReceptionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReceptionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReceptionRepository {
	mock := &ReceptionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
